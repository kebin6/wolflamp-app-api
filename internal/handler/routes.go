// Code generated by goctl. DO NOT EDIT.
package handler

import (
	"net/http"

	exchange "github.com/kebin6/wolflamp-app-api/internal/handler/exchange"
	game "github.com/kebin6/wolflamp-app-api/internal/handler/game"
	notice "github.com/kebin6/wolflamp-app-api/internal/handler/notice"
	order "github.com/kebin6/wolflamp-app-api/internal/handler/order"
	player "github.com/kebin6/wolflamp-app-api/internal/handler/player"
	reward "github.com/kebin6/wolflamp-app-api/internal/handler/reward"
	wallet "github.com/kebin6/wolflamp-app-api/internal/handler/wallet"
	"github.com/kebin6/wolflamp-app-api/internal/svc"

	"github.com/zeromicro/go-zero/rest"
)

func RegisterHandlers(server *rest.Server, serverCtx *svc.ServiceContext) {
	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodPost,
				Path:    "/captcha",
				Handler: player.CaptchaHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/register",
				Handler: player.RegisterHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/login",
				Handler: player.LoginHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/change",
				Handler: player.ForgetPasswordHandler(serverCtx),
			},
		},
	)

	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodPost,
				Path:    "/person",
				Handler: player.PersonInfoHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/share",
				Handler: player.ShareHandler(serverCtx),
			},
		},
		rest.WithJwt(serverCtx.Config.Auth.AccessSecret),
	)

	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodPost,
				Path:    "/transaction_password/verify",
				Handler: wallet.VerifyTransactionPasswordHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/transaction_password/update",
				Handler: wallet.TransactionPasswordHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/withdraw/estimate",
				Handler: wallet.EstimateWithdrawHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/withdraw",
				Handler: wallet.WithdrawHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/wallet",
				Handler: wallet.WalletHandler(serverCtx),
			},
		},
		rest.WithJwt(serverCtx.Config.Auth.AccessSecret),
	)

	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodPost,
				Path:    "/notice",
				Handler: notice.NoticeHandler(serverCtx),
			},
		},
	)

	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodPost,
				Path:    "/list",
				Handler: order.ListHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/find",
				Handler: order.FindHandler(serverCtx),
			},
		},
		rest.WithJwt(serverCtx.Config.Auth.AccessSecret),
		rest.WithPrefix("/order"),
	)

	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodPost,
				Path:    "/",
				Handler: exchange.ExchangeHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/list",
				Handler: exchange.ListHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/find",
				Handler: exchange.FindHandler(serverCtx),
			},
		},
		rest.WithJwt(serverCtx.Config.Auth.AccessSecret),
		rest.WithPrefix("/exchange"),
	)

	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodPost,
				Path:    "/list",
				Handler: reward.ListHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/find",
				Handler: reward.FindHandler(serverCtx),
			},
		},
		rest.WithJwt(serverCtx.Config.Auth.AccessSecret),
		rest.WithPrefix("/reward"),
	)

	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodPost,
				Path:    "/game",
				Handler: game.GetRoundInfoHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/game/invest",
				Handler: game.InvestHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/game/history",
				Handler: game.GetHistoryListHandler(serverCtx),
			},
		},
		rest.WithJwt(serverCtx.Config.Auth.AccessSecret),
	)
}
